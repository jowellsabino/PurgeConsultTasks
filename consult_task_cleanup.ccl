/**
* <strong>Object name</strong>: chb_consult_tasks_cleanup <br />
* <strong>Program purpose</strong>: Mark tasks with completed consult orders <br />
* <strong>Author</strong>: Jowell S. Sabino <br />
* <strong>SME/Sponsor</strong>: ISD CHAMPS Customer Experience <br />
* <strong>Usage</strong>: Purge consut orders that are "stuck" in Message Center <br />
* <strong>Notes</strong>: due to Cerner bug <br />
*
* @class chb_js_pending_tasks
* @constructor
* @param {vc}  OUTDEV
* @param {dq8} PRSNL_ID
*/
 
 
drop   program chb_consult_tasks_cleanup go
create program chb_consult_tasks_cleanup
 
prompt
      "Output to File/Printer/MINE (default = MINE): " = "MINE",
      "Personnel id to attribute the change (default = 8531805.00 <Jowell>): " = 8531805.00 
with OUTDEV,PRSNL_ID
 
/**************************************************************
; INCLUDES AND EXTERNAL LIBRARIES
**************************************************************/
/**
* Example of attribute
* @attribute includes <add any include files here>
*/
;None
 
/**************************************************************
; RECORD STRUCTURES
**************************************************************/
free record consult_tasks
record consult_tasks (
	1 consult_task_cnt			= i4
	1 consult_task_list[*]
		2 consult_task_id		= f8
)
 
/**************************************************************
; DECLARED SUBROUTINES
**************************************************************/
declare sub_get_consult_tasks(null)	= i2 with protect
declare sub_update_consult_tasks(user_id = f8)	= i2 with protect
 
/**************************************************************
; CONSTANTS
**************************************************************/
/* Prompts */
declare C_P_OUTDEV    	      = vc  with protect, constant($OUTDEV)
declare C_P_PRSNL_ID   	      = f8  with protect, constant($PRSNL_ID)
 
 
/* Codeset-derived constants */
declare C_COMPLETED_ORDER_STATUS         = f8 with protect,constant(uar_get_code_by("MEANING",6004,"COMPLETED")) ; 2543
declare C_DISCONTINUED_ORDER_STATUS      = f8 with protect,constant(uar_get_code_by("MEANING",6004,"DISCONTINUED")) ; 2543
declare C_COMPLETE_ORDER_TASK_ACTIVITY   = f8 with protect,constant(uar_get_code_by("MEANING",6027,"COMP ORDER")) ; 2698
declare C_ORDER_TASK_TYPE                = f8 with protect,constant(uar_get_code_by("MEANING",6026,"ORDER")) ; 2672
declare C_PENDING_TASK_STATUS            = f8 with protect,constant(uar_get_code_by("MEANING",79,"PENDING")) ; 429
declare C_COMPLETE_TASK_STATUS           = f8 with protect,constant(uar_get_code_by("MEANING",79,"COMPLETE")) ; 419
 
/**************************************************************
; VARIABLES
**************************************************************/
declare stat = i2 with protect,noconstant(0)
declare user_id = f8 with protect,noconstant(0)
 
;/**************************************************************
; VARIABLE INITIALIZATION
;**************************************************************/

 
/**************************************************************
; MAIN PROGRAM AND QUERIES
**************************************************************/
set stat =  sub_get_consult_tasks(null)
 
if (stat = 0)
	call echo("No consult tasks identified")
else
	call echo("Consult tasks identified.  Proceeding with update.")
	if (reqinfo->updt_id > 0)
		/* Get user_id from request. */
		set user_id =  reqinfo->updt_id
	else
		/* If zero (ran from backend), set to the parameter supplied for PRSNL_ID */
		set user_id = C_P_PRSNL_ID
		call echo(build2("Using prompt user_id = ",user_id))
	endif
	set stat = sub_update_consult_tasks(user_id)
endif
 
 
/**************************************************************
; FREE RECORD STRUCTURES
**************************************************************/
free record consult_tasks
 
/**************************************************************
; SUBROUTINES
**************************************************************/
/**
* @method sub_get_consult_tasks
* @param null
* @return {i2} Success/Fail flag
*/
subroutine sub_get_consult_tasks(null)
 
	declare consult_task_cnt	= i4 with protect,noconstant(0)
 
	select into C_P_OUTDEV
      from task_activity ta,
           orders o
      plan ta
     where ta.task_status_cd =  C_PENDING_TASK_STATUS
       and ta.task_type_cd =  C_ORDER_TASK_TYPE
       and ta.task_activity_cd =  C_COMPLETE_ORDER_TASK_ACTIVITY
       and ta.active_ind = 1
      join o
     where o.order_id = ta.order_id
       and o.order_id > 0
       and o.active_ind = 1
       and o.order_status_cd in(C_COMPLETED_ORDER_STATUS,C_DISCONTINUED_ORDER_STATUS)
  order by ta.task_id
 
 	head report
 
 	    /* Initialize counters */
 		consult_tasks->consult_task_cnt = consult_task_cnt
 
   	detail
 
	 		/* Allocate consult_task_list record structures as needed, by 10 */
	 		consult_task_cnt = consult_task_cnt + 1
	 		if(mod(consult_task_cnt, 10) = 1)
	 			stat = alterlist(consult_tasks->consult_task_list,consult_task_cnt + 9)
	 		endif
 
	 		consult_tasks->consult_task_cnt = consult_task_cnt
	 		consult_tasks->consult_task_list[consult_task_cnt].consult_task_id = ta.task_id
 
 
   	foot report
		/* Recover unused allocation of personnel_task_list */
		stat = alterlist(consult_tasks->consult_task_list,consult_task_cnt)
 
 	with nocounter
 
 	call echorecord(consult_tasks)
	return(curqual)
end
 
/**
* @method sub_update_consult_tasks
* @param user_id = f8  User_id to put as updt_id (for auditing)
* @return {i2} Success/Fail flag
*/
subroutine sub_update_consult_tasks(user_id)
 
	declare cnt = i4 with protect,noconstant(0)
 
 	
	/* Update task_activity */
	update into task_activity ta,
			    (dummyt da with seq = value(size(consult_tasks->consult_task_list,5)))		     
	   	set ta.task_status_cd = C_COMPLETE_TASK_STATUS,
		   	ta.updt_id = user_id, 
		   	ta.updt_applctx = 0,
		   	ta.updt_task = 0,
			ta.updt_cnt = ta.updt_cnt+1,
			ta.updt_dt_tm = cnvtdatetime(curdate,curtime3)
		plan da
		join ta
	  	where
	        ta.task_id = consult_tasks->consult_task_list[da.seq].consult_task_id
 
 
	if (curqual > 0)
 
		/* Update task_activity_assignment anatomically */
		update into task_activity_assignment taa,
					(dummyt daa with seq = value(size(consult_tasks->consult_task_list,5)))
			set taa.task_status_cd = C_COMPLETE_TASK_STATUS,
		    	taa.updt_id = user_id,  
		     	taa.updt_applctx = 0,
				taa.updt_task = 0,
				taa.updt_cnt = taa.updt_cnt+1,
				taa.updt_dt_tm = cnvtdatetime(curdate,curtime3)
			plan daa
			join taa
	    	where
	        	taa.task_id = consult_tasks->consult_task_list[daa.seq].consult_task_id
 
		if (curqual > 0)
				commit
				call echo("Task updated.")
		else
				rollback
		    	call echo("Error encountered on task_activity_assignment.")
		endif
	else
		rollback
	    call echo("Error encountered on task_activity.")
	endif
 

	/* Returns the last status */
	return(curqual)
end
 
# exit_script
end
go